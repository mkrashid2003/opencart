<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/test/java/utilities/excelutil.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/utilities/excelutil.java" />
              <option name="originalContent" value="package utilities;&#10;&#10;import java.io.File;&#10;import java.io.FileInputStream;&#10;import java.io.FileOutputStream;&#10;import java.io.IOException;&#10;import java.io.InputStream;&#10;&#10;import org.apache.poi.EncryptedDocumentException;&#10;import org.apache.poi.openxml4j.exceptions.InvalidFormatException;&#10;import org.apache.poi.ss.usermodel.Cell;&#10;import org.apache.poi.ss.usermodel.DataFormatter;&#10;import org.apache.poi.ss.usermodel.Row;&#10;import org.apache.poi.ss.usermodel.Sheet;&#10;import org.apache.poi.ss.usermodel.Workbook;&#10;import org.apache.poi.ss.usermodel.WorkbookFactory;&#10;&#10;public class excelutil {&#10;    public String path;&#10;&#10;    public excelutil(String path) {&#10;        this.path = path;&#10;    }&#10;&#10;    // returns last row index (zero-based) like original implementation&#10;    public int getRowCount(String sheetName) throws IOException {&#10;        try (InputStream is = new FileInputStream(path);&#10;             Workbook wb = WorkbookFactory.create(is)) {&#10;            Sheet ws = wb.getSheet(sheetName);&#10;            if (ws == null) return 0;&#10;            return ws.getLastRowNum();&#10;        } catch (EncryptedDocumentException | InvalidFormatException e) {&#10;            throw new IOException(&quot;Failed to open workbook&quot;, e);&#10;        }&#10;    }&#10;&#10;    // returns number of cells in the given row (lastCellNum)&#10;    public int getCellCount(String sheetName, int rownum) throws IOException {&#10;        try (InputStream is = new FileInputStream(path);&#10;             Workbook wb = WorkbookFactory.create(is)) {&#10;            Sheet ws = wb.getSheet(sheetName);&#10;            if (ws == null) return 0;&#10;            Row row = ws.getRow(rownum);&#10;            if (row == null) return 0;&#10;            return row.getLastCellNum();&#10;        } catch (EncryptedDocumentException | InvalidFormatException e) {&#10;            throw new IOException(&quot;Failed to open workbook&quot;, e);&#10;        }&#10;    }&#10;&#10;    // returns cell value as String; empty string for null cells&#10;    public String getCellData(String sheetName, int rownum, int colnum) throws IOException {&#10;        try (InputStream is = new FileInputStream(path);&#10;             Workbook wb = WorkbookFactory.create(is)) {&#10;            Sheet ws = wb.getSheet(sheetName);&#10;            if (ws == null) return &quot;&quot;;&#10;            Row row = ws.getRow(rownum);&#10;            if (row == null) return &quot;&quot;;&#10;            Cell cell = row.getCell(colnum);&#10;            if (cell == null) return &quot;&quot;;&#10;            DataFormatter formatter = new DataFormatter();&#10;            return formatter.formatCellValue(cell);&#10;        } catch (EncryptedDocumentException | InvalidFormatException e) {&#10;            throw new IOException(&quot;Failed to open workbook&quot;, e);&#10;        }&#10;    }&#10;&#10;    // sets cell value; creates sheet/row/cell if needed&#10;    public void setCellData(String sheetName, int rownum, int colnum, String data) throws IOException {&#10;        File file = new File(path);&#10;        // ensure parent dirs exist&#10;        File parent = file.getParentFile();&#10;        if (parent != null &amp;&amp; !parent.exists()) parent.mkdirs();&#10;&#10;        try (InputStream is = new FileInputStream(file)) {&#10;            Workbook wb = WorkbookFactory.create(is);&#10;            Sheet ws = wb.getSheet(sheetName);&#10;            if (ws == null) {&#10;                ws = wb.createSheet(sheetName);&#10;            }&#10;            Row row = ws.getRow(rownum);&#10;            if (row == null) row = ws.createRow(rownum);&#10;            Cell cell = row.getCell(colnum);&#10;            if (cell == null) cell = row.createCell(colnum);&#10;            cell.setCellValue(data);&#10;&#10;            // write back to file&#10;            try (FileOutputStream fo = new FileOutputStream(file)) {&#10;                wb.write(fo);&#10;            }&#10;            wb.close();&#10;        } catch (EncryptedDocumentException | InvalidFormatException e) {&#10;            throw new IOException(&quot;Failed to open workbook&quot;, e);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package utilities;&#10;&#10;import java.io.File;&#10;import java.io.FileInputStream;&#10;import java.io.FileOutputStream;&#10;import java.io.IOException;&#10;import java.io.InputStream;&#10;&#10;import org.apache.poi.EncryptedDocumentException;&#10;import org.apache.poi.ss.usermodel.Cell;&#10;import org.apache.poi.ss.usermodel.DataFormatter;&#10;import org.apache.poi.ss.usermodel.Row;&#10;import org.apache.poi.ss.usermodel.Sheet;&#10;import org.apache.poi.ss.usermodel.Workbook;&#10;import org.apache.poi.ss.usermodel.WorkbookFactory;&#10;&#10;public class excelutil {&#10;    public String path;&#10;&#10;    public excelutil(String path) {&#10;        this.path = path;&#10;    }&#10;&#10;    // returns last row index (zero-based) like original implementation&#10;    public int getRowCount(String sheetName) throws IOException {&#10;        try (InputStream is = new FileInputStream(path);&#10;             Workbook wb = WorkbookFactory.create(is)) {&#10;            Sheet ws = wb.getSheet(sheetName);&#10;            if (ws == null) return 0;&#10;            return ws.getLastRowNum();&#10;        } catch (EncryptedDocumentException e) {&#10;            throw new IOException(&quot;Failed to open workbook&quot;, e);&#10;        }&#10;    }&#10;&#10;    // returns number of cells in the given row (lastCellNum)&#10;    public int getCellCount(String sheetName, int rownum) throws IOException {&#10;        try (InputStream is = new FileInputStream(path);&#10;             Workbook wb = WorkbookFactory.create(is)) {&#10;            Sheet ws = wb.getSheet(sheetName);&#10;            if (ws == null) return 0;&#10;            Row row = ws.getRow(rownum);&#10;            if (row == null) return 0;&#10;            return row.getLastCellNum();&#10;        } catch (EncryptedDocumentException e) {&#10;            throw new IOException(&quot;Failed to open workbook&quot;, e);&#10;        }&#10;    }&#10;&#10;    // returns cell value as String; empty string for null cells&#10;    public String getCellData(String sheetName, int rownum, int colnum) throws IOException {&#10;        try (InputStream is = new FileInputStream(path);&#10;             Workbook wb = WorkbookFactory.create(is)) {&#10;            Sheet ws = wb.getSheet(sheetName);&#10;            if (ws == null) return &quot;&quot;;&#10;            Row row = ws.getRow(rownum);&#10;            if (row == null) return &quot;&quot;;&#10;            Cell cell = row.getCell(colnum);&#10;            if (cell == null) return &quot;&quot;;&#10;            DataFormatter formatter = new DataFormatter();&#10;            return formatter.formatCellValue(cell);&#10;        } catch (EncryptedDocumentException e) {&#10;            throw new IOException(&quot;Failed to open workbook&quot;, e);&#10;        }&#10;    }&#10;&#10;    // sets cell value; creates sheet/row/cell if needed&#10;    public void setCellData(String sheetName, int rownum, int colnum, String data) throws IOException {&#10;        File file = new File(path);&#10;        // ensure parent dirs exist&#10;        File parent = file.getParentFile();&#10;        if (parent != null &amp;&amp; !parent.exists()) parent.mkdirs();&#10;&#10;        try (InputStream is = new FileInputStream(file)) {&#10;            Workbook wb = WorkbookFactory.create(is);&#10;            Sheet ws = wb.getSheet(sheetName);&#10;            if (ws == null) {&#10;                ws = wb.createSheet(sheetName);&#10;            }&#10;            Row row = ws.getRow(rownum);&#10;            if (row == null) row = ws.createRow(rownum);&#10;            Cell cell = row.getCell(colnum);&#10;            if (cell == null) cell = row.createCell(colnum);&#10;            cell.setCellValue(data);&#10;&#10;            // write back to file&#10;            try (FileOutputStream fo = new FileOutputStream(file)) {&#10;                wb.write(fo);&#10;            }&#10;            wb.close();&#10;        } catch (EncryptedDocumentException e) {&#10;            throw new IOException(&quot;Failed to open workbook&quot;, e);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>